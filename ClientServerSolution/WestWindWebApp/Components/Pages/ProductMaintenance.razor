@page "/ProductMaintenance/{ProductID:int?}"
@* TODO;
Have a heading of 'Edit Product' OR 'Add Product' as appropriatte
*@

@using WestWindSystem.BLL;
@using WestWindSystem.DAL;
@using WestWindSystem.Entities;

@if (ProductID != 0)
{
    <h3>Edit Product</h3>
}
else
{
    <h3>Add Product</h3>
}


@if (!string.IsNullOrWhiteSpace(FeedbackMessage))
{
    <div class="alert alert-info">
        @FeedbackMessage
    </div>
}

@if(Product.Discontinued)
{
    <div class="mb-3">
        <div class="alert alert-warning fw-bold">
            PRODUCT DISCONTINUED
        </div>
    </div>
}


@* TODO:
Load all the values for the product into text boxes so they can be edited.

*@
<div class="row bm-3">
    <div class="col-3">
        <label class="form-label" for="productid">ID</label>
        <input class="form-control" type="text" id="productid" @bind="@Product.ProductId" disabled />
    </div>


    <div class="col-6">
        <label class="form-label" for="name">Name</label>
        <input class="form-control" type="text" id="name" 
        @bind="@Product.ProductName" disabled ="@Product.Discontinued"/>
    </div>
</div>

<div class="row bm-3">
    <div class="col-3">
        <label class="form-label" for="qytperunit">Quantity Per Unit</label>
        <input class="form-control" type="text" id="qytperunit" @bind="@Product.QuantityPerUnit" disabled="@Product.Discontinued" />
    </div>


    <div class="col-6">
        <label class="form-label" for="minorderqty">Minimum Order Quantity</label>
        <input class="form-control" type="text" id="minorderqty" @bind="@Product.MinimumOrderQuantity" disabled="@Product.Discontinued" />
    </div>
</div>


<div class="row bm-3">
    <div class="col-3">
        <label class="form-label" for="unitprice">Unit Price</label>
        <input class="form-control" type="text" id="unitprice" @bind="@Product.UnitPrice" disabled="@Product.Discontinued" />
    </div>

    <div class="col-6">
        <label class="form-label" for="unitsonorder">Units On Order</label>
        <input class="form-control" type="text" id="unitsonorder" @bind="@Product.UnitsOnOrder" disabled="@Product.Discontinued" />
    </div>
</div>

<div class="mb-3">
    <select class="form-select" id="category" style="width:300px" @bind="@Product.CategoryId" disabled="@Product.Discontinued">
        <option value=0> Please choose a category</option>
        @foreach (Category aCategory in CategoryServices.GetAllCategories())
        {
            <option value="@aCategory.CategoryId"> @aCategory.CategoryName </option>
        }
    </select>
</div>

<div class="mb-3">
    <select class="form-select" id="supplier" style="width:300px" @bind="@Product.SupplierId" disabled="@Product.Discontinued">
        <option value=0> Please choose a Supplier</option>
        @foreach (Supplier aSupplier in SupplierServices.GetAllSuppliers())
        {
            <option value="@aSupplier.SupplierId"> @aSupplier.CompanyName </option>
        }
    </select>
</div>

@if (!Product.Discontinued)
{
    <div class="mt-3">
        <button class="btn btn-primary" @onclick="SaveProduct">Save Product</button>
        <button class="btn btn-primary" @onclick="DiscontinueProduct">Discontinue Product</button>
        <button class="btn btn-primary" @onclick="DeleteProduct">Delete Product</button>
    </div>
}

@code {

    [Parameter]
    public int ProductID { get; set; }

    [Inject]
    ProductServices ProductServices { get; set; }

    [Inject]
    CategoryServices CategoryServices { get; set; }

    [Inject]
    SupplierServices SupplierServices { get; set; }


    Product Product { get; set; } = new();
    private string? FeedbackMessage { get; set; }
    private Dictionary<string, string> Errors { get; set; } = new();

    private void SaveProduct()
    {
        @if (ProductID != 0)
        {
            //update code
            try
            {
                ProductServices.UpdateProduct(Product);
                FeedbackMessage = "Product Successfully updated!";
            }
            catch (Exception ex)
            {
                //Add to dictionary
                Errors.Add("product-update", ex.Message);
            }
        }
        else
        {
            //add code
            try
            {
                ProductServices.AddProduct(Product);
                FeedbackMessage = "Product Successfully Added!";
            }
            catch (Exception ex)
            {
                //Add to dictionary
                Errors.Add("product-add", ex.Message);
            }
        }
    }

    private void DiscontinueProduct()
    {
        try
        {
            ProductServices.DiscontinueProduct(Product);
        }
        catch(Exception ex)
        {
            Errors.Add("product-discontinue", ex.Message);
        }
    }
    private void DeleteProduct()
    {
        try
        {
            ProductServices.DeleteProduct(Product);
            FeedbackMessage = "Product Successfully Deleted!";
        }
        catch (Exception ex)
        {
            Errors.Add("product-Delete", ex.Message);
        }
    }

    protected override void OnInitialized()
    {
        if (ProductID != 0)
        {
            Product = ProductServices.LookProductByID(ProductID);
        }
        base.OnInitialized();
    }
    //TODO:
    //ADD
    //Discontinue
    //Delete

    //Validation
    //validate the controls for valid data as described in class
    //show them in one list at top of screen or do the update/add if there were no errors
}